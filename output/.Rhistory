a; b
c(a,b)
c <-
c
c(a,b)
lapply(c(a,b),max) #list로 결과 반환
c<-lapply(c(a,b),max) #list로 결과 반환
c
mode(c)
mode(c) ; class(c)
# 리스트 형식을 벡터 형식으로 반환하기
c <- sapply(c(a,b),max)
c
mode(c); class(c) # "numeric" "integer"
# 다차원 리스트 객체 생성
multi_list <- list(list(1,2,3), list('a','b','c'))
multi_list
# 다차원 리스트 객체 생성
multi_list <- list(list(1,2,3), list('a','b','c'), list(100,200,300))
multi_list
multi_list <- list(c1=list(1,2,3), c2=list(10,20,30), c3=list(100,200,300))
multi_list
multi_list$c1
multi_list$c2
multi_list$c3
mode(multi_list); class(multi_list)
class(d) # "matrix"
# 다차원 리스트를 열 단위로 바인딩
d <- do.call(cbind, multi_list)
d
class(d) # "matrix"
# 벡터 이용 객체 생성
no  <- c(1, 2, 3)
name <- c("홍길동", "이순신", "강감찬")
pay <- c(150, 250, 300)
vemp <- data.frame(No=no,Name=name,Pay=pay)
vemp
class(vemp) # "data.frame"
# matrix 이용 객체 생성
args(matrix)
m <- matrix(c(1,"홍길동", 150,
2,"이순신", 250,
3, "강감찬", 300),3 , byrow = T)
m
class(m)
memp <- data.frame(m)
memp
class(memp)
# txt 파일 이용 객체 생성
getwd()
setwd("C:/workspaces/Rwork/data")
txtemp <- read.table('emp.txt')
txtemp <- read.table('emp.txt', header = T, sep = "")
txtemp <- read.table('emp.txt', header = T, sep = "")
txtemp
class(txtemp)
# csv 파일 이용 객체 생성(header=F)
name <- c("사번", "이름", "급여")
csvtemp2 <- read.csv("emp2.csv", header = F, col.names = name)
csvtemp2
# 데이터프레임 만들기
df <- data.frame(x=c(1:5), y=seq(2,10,2), z=c('a','b','c','d','e'))
df
# 데이터프레임 컬럼명 참조
df$x
# 자료구조, 열수, 행수, 컬럼명 보기
str(df)
ncol(df)
nrow(df)
df[c(2:3)]
# 요약 통계량 보기
summary(df)
# 데이터프레임 자료에 함수 적용
apply(df[,c(1,2)], 2, sum)
# 데이터프레임의 부분 객체 만들기
x1 <- subset(df, x >= 3) # x가 3이상인 레코드 대상
x1
y1 <- subset(df, y <= 8) # y가 8이하인 레코드 대상
y1
# 두 개의 조건으로 부분 객체 만들기
xyand <- subset(df, x>=2 & y<=6)
xyand
xyor <- subset(df, x>=2 | y<=6)
xyor
# student 데이터프레임 만들기
sid <- c('A','B','C','D')
score <- c(90, 80, 70, 60)
subject <- c('컴퓨터', '국어국문', '소프트웨어', '유아교육')
student <- data.frame(sid, score, subject)
student
# 자료형과 자료구조 보기
mode(student); class(student) # list, data.frame
# 자료형과 자료구조 보기
mode(student); class(student) # list, data.frame
str(sid); str(score); str(subject)
str(sid); str(score); str(subject)
str(student)
# 두 개 이상의 데이터프레임 병합하기
height <- data.frame(id=c(1,2), h=c(180, 175))
weight <- data.frame(id=c(1,2), w=c(80,75))
height; weight
person <- merge(height , weight)
person
person <- merge(height , weight, by.x="id")
person
person <- merge(height , weight, by.x="id", by.y="id")
person
# galton 데이터 셋 가져오기
install.packages("UsingR") # 패키지 설치
library(UsingR) # 패키지 메모리에 로드
data("galton") # galton 데이터 셋 가져오기
# galton 데이터 셋 구조 보기
str(galton)
dim(galton)
head(galton, 20)
head(galton) # default 갯수:6
view(galton)
View(galton)
tail(galton)
# 문자열 추출하기
install.packages("stringr") # 패키지 설치
r
library(stringr) # 메모리 로딩
# 형식) str_extract('문자열', '정규표현식')
str_extract("홍길동35이순신45강감찬50","[0-9]")
str_extract_all("홍길동35이순신45강감찬50","[0-9]")
# 형식) str_extract('문자열', '정규표현식')
str_extract("홍길동35이순신45강감찬50","[0-9]{2}")
str_extract_all("홍길동35이순신45강감찬50","[0-9]{2}")
# 반복수를 지정하여 영문자 추출
string <- 'hongkildong105lee1002you25강감찬2005'
str_extract_all(string, '[a-z]{3}') # 알파벳
str_extract_all(string, '[0-9]{3}')
str_extract_all(string, '[0-9]{4}')
str_extract_all(string, '[a-z]{>=3}') # 3글자 이상 연속된 알파벳 추출
str_extract_all(string, '[a-z]{3,}') # 3글자 이상 연속된 알파벳 추출
str_extract_all(string, '[a-z]{,3}')
str_extract_all(string, '[a-z]{3,5}')
str_extract_all(string, '[a-z]{,5}')# 3~5글자 범위에 속하는 연속된 알파벳 추출
str_extract_all(string, '[a-z]{3,5}')# 3~5글자 범위에 속하는 연속된 알파벳 추출
(
str_extract_all(string, '강감찬')
# 특정 단어 추출
str_extract_all(string, '유관순')
# 특정 단어 추출
str_extract_all(string, '유관순')
str_extract_all(string, '강감찬')
str_extract_all(string, '[가-힣]{3,}') # 한글 검색
# 한글, 영문자, 숫자 추출하기
str_extract_all(string, 'hong')
str_extract_all(string, '25')
str_extract_all(string, '[A-Z]') # 대문자 검색
str_extract_all(string, '[a-z]{3,}') # 소문자 검색
str_extract_all(string, '[0-9]') # 숫자 검색
str_extract_all(string, '[0-9]{4}') # 숫자 검색
# 한글, 영문자, 숫자를 제외한 나머지 추출하기
str_extract_all(string, '')
str_extract_all(string, '[a-z]{3}') # 소문자 검색
str_extract_all(string, '[A-Z]{3}') # 대문자 검색
# 한글, 영문자, 숫자를 제외한 나머지 추출하기
str_extract_all(string, '^[a-z]')
# 한글, 영문자, 숫자를 제외한 나머지 추출하기
str_extract_all(string, '[^a-z]')
# 한글, 영문자, 숫자를 제외한 나머지 추출하기
str_extract_all(string, '[^a-z]{3}')
str_extract_all(string, '[^a-z]{4}')
str_extract_all(string, '[^가-힣]{5}')
str_extract_all(string, '[^0-9]{3}')
str_extract_all(string, '[^가-힣]{5}') #한글을 제외
4
str_extract_all(jumin, '[0-9]{6}-[1234][0-9]{6}')
# 주민등록번호 검사하기
jumin <- '123456-3234567'
str_extract_all(jumin, '[0-9]{6}-[1234][0-9]{6}')
str_extract_all(jumin, '[0-9]{6}-[1-4][0-9]{6}')
str_extract_all(jumin, '\\d')
str_extract_all(jumin, '\d')
str_extract_all(jumin, '\\d')
str_extract_all(jumin, '\\d{6}-[1-4]\\d{6}')
# 지정된 길이의 단어 추출하기
name <- '홍길동1234,이순신5678,강감찬1012'
str_extract_all(name, '\\w')
str_extract_all(name, '\\w{7,}')
# '\\w' : 한글/영문자/숫자 포함. 특수문자 제외.
# '\\W' : 특수문자 선택.
str_extract_all(name, '\\W')
# 문자열 위치(index) 구하기
string <- 'hongkd105leess1002you25강감찬2005'
str_locate(string, '강감찬')
# 문자열 길이 구하기
string <- 'hongkild105lee1002you25강감찬2005'
len <- str_length(string) # 30
len
# 부분 문자열
string_sub <- str_sub(string, 1, len-7)
string_sub
string_sub <- str_sub(string, 1, 23)
string_sub
# 대문자, 소문자 변경하기
str_to_upper(string_sub)
str_to_lower(string_sub)
# 문자열 교체하기
string_rep <- str_replace(string_sub, 'hongkild105', '홍길동35,')
string_rep <- str_replace(string_rep, 'lee1002', '이순신45,')
string_rep <- str_replace(string_rep, 'you25', '유관순25,')
string_rep
# 문자열 결합하기
string_c <- str_c(string_rep, '강감찬55')
string_c
# 문자열 분리하기
string_sp <- str_split(string_c, ',')
string_sp
# 문자열 합치기
string_vec <- c('홍길동35', '이순신45', '유관순25', '강감찬55')
string_vec
string_join <- paste(string_vec, collapse = ',')
string_join
# 키보드로 숫자 입력하기
num <- scan()
765756
67
num
# 키보드로 숫자 입력하기
num <- scan()
num
# 키보드로 숫자 입력하기
num <- scan()
num
# 키보드로 문자 입력하기
name <- scan(what= character())
name
# 키보드로 문자 입력하기
name <- scan(what= character())
name
# 편집기 이용 데이터프레임 만들기
df <- data.frame()
df <-
df
df <- edit(df)
df <- edit(df)
# 편집기 이용 데이터프레임 만들기
df <- data.frame()
df <- edit(df)
df
df
df <- edit(df)
df
student <- read.table(file = 'student.txt')
student
mode(student); class(student)
names(student) <- c('번호', '이름', '키', '몸무게')
student
#   - 컬럼명이 있는 파일 불러오기
student1 <- read.table(file = 'student.txt', header=T)
student1
#   - 컬럼명이 있는 파일 불러오기
student1 <- read.table(file = 'student1.txt', header=T)
student1
student <- read.table(file = 'student.txt')
student
names(student) <- c('번호', '이름', '키', '몸무게')
student
#   - 컬럼명이 있는 파일 불러오기
student1 <- read.table(file = 'student1.txt', header=T)
student1
#   - 탐색기를 통해서 파일 선택하기
student1 <- read.table(file.choose(), header=T)
student1
#   - 구분자가 있는 경우(세미콜론, 탭)
student2 <- read.table(file='student2.txt', sep=';', header = T)
student2
#   - 결측치를 처리하여 파일 불러오기
student3 <- read.table(file='student3.txt', sep='', header=T, na.strings = "-")
student3
df
# 편집기 이용 데이터프레임 만들기
df <- data.frame()
df <- edit(df)
# 편집기 이용 데이터프레임 만들기
df <- data.frame()
df <- edit(df)
#   - 결측치를 처리하여 파일 불러오기
student3 <- read.table(file='student3.txt', sep='', header=T, na.strings = "-")
student3
#   - csv 파일 형식 불러오기
student4 <- read.csv(file='student4.txt', na.strings="-", encoding = 'UTF-8')
student4
# read.xlsx() 함수 이용 - 엑셀데이터 읽어오기
# 패키지 설치와 java 실행 환경 설정
install.packages("rJava") # rJava 패키지 설치
Sys.setenv(JAVA_HOME="C:\Program Files\Java\jdk-11.0.16.1")
Sys.setenv(JAVA_HOME='C:\Program Files\Java\jdk-11.0.16.1')
Sys.setenv(JAVA_HOME='C:\Program Files\Java\jdk-11.0.16.1')
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk-11.0.16.1')
# 엑셀 파일 가져오기
studentex <- read.xlsx('studentexecel.xlsx', encoding = 'UTF-8')
studentex
# 엑셀 파일 가져오기
studentex <- read.xlsx('studentexcel.xlsx', encoding = 'UTF-8')
# 엑셀 파일 가져오기
studentex <- read.xlsx(file='studentexcel.xlsx', encoding = 'UTF-8')
# 엑셀 파일 가져오기
studentex <- read.xlsx(file='studentexcel.xlsx', encoding = 'UTF-8')
# 관련 패키지 메모리 로드
library(rJava)
library(xlsx)
# 엑셀 파일 가져오기
studentex <- read.xlsx(file='studentexcel.xlsx', encoding = 'UTF-8')
# read.xlsx() 함수 이용 - 엑셀데이터 읽어오기
# 패키지 설치와 java 실행 환경 설정
install.packages("rJava") # rJava 패키지 설치
install.packages("xlsx")  # xlsx 패키지 설치
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk-11.0.16.1')
# 관련 패키지 메모리 로드
library(rJava)
library(xlsx)
# 엑셀 파일 가져오기
studentex <- read.xlsx(file='studentexcel.xlsx', encoding = 'UTF-8')
studentex
# 엑셀 파일 가져오기
studentex <- read.xlsx('studentexcel.xlsx', encoding = 'UTF-8')
# 엑셀 파일 가져오기
studentex <- read.xlsx("studentexcel.xlsx", encoding = "UTF-8")
# 엑셀 파일 가져오기
studentex <- read.xlsx("studentexcel.xlsx", encoding = "UTF-8", sheetIndex = 'emp2')
# 엑셀 파일 가져오기
studentex <- read.xlsx("studentexcel.xlsx", encoding = "UTF-8", sheetIndex = 1)
studentex
install.packages("readxl")
library(readxl)
read_excel(path = "studentexcel.xlsx", sheet = 1)
st_excel <- read_excel(path = "studentexcel.xlsx", sheet = 1)
st_excel
# 단계1 : 세계 GDP 순위 데이터 가져오기
GDP_ranking <- read.csv("https://databank.worldbank.org/data/download/GDP.csv", encoding = "UTF-8")
GDP_ranking
head(GDP_ranking, 20)
dim(GDP_ranking)
# 데이터를 가공하기 위해 불필요한 행과 열을 제거한다.
GDP_ranking2 <- GDP_ranking[-c(1:4), c(1,2,4,5)]
# 데이터를 가공하기 위해 불필요한 행과 열을 제거한다.
GDP_ranking2 <- GDP_ranking[-c(1:4), c(1,2,4,5)]
head(GDP_ranking2)
# 상위 16개 국가 선별한다.
GDP_ranking16 <- head(GDP_ranking2, 16) # 상위 16개 국가
GDP_ranking16
# 데이터프레임을 구성하는 4개의 열에 대한 이름을 지정한다.
names(GDP_ranking16) <- c('Code', 'Ranking', 'Nation', 'GDP')
GDP_ranking16
dim(GDP_ranking16)
# 단계2 : 세계 GDP 상위 16위 국가 막대 차트 시각화
gdp <- GDP_ranking16$GDP
nation <- GDP_ranking16$Nation
gdp
num_gdp
library(stringr)
install.packages("stringr")
num_gdp <- as.numeric(str_replace_all(gdp, ',', ''))
install.packages("stringr")
library(stringr)
num_gdp <- as.numeric(str_replace_all(gdp, ',', ''))
num_gdp
gdp
# 막대차트 시각화
barplot(GDP_ranking16$GDP, col = rainbow(16),
xlab = '국가(nation)', ylab='단위(달러)', names.arg=nation)
# 단계1 : XML / httr 패키지 설치
install.packages("XML")
library(XML)
install.packages("httr")
library(httr)
# 단계2 : 미국의 주별 1인당 소득 자료 가져오기.
url <- "https://ssti.org/blog/useful-stats-capita-personal-income-state-2010-2015"
get_url <- GET(url)
get_url$content
rawToChar(get_url$content)
readHTMLTable(rawToChar(get_url$content), stringsAsFactors=F)
class(html_cont)
html_cont <- readHTMLTable(rawToChar(get_url$content), stringsAsFactors=F)
class(html_cont)
as.data.frame(html_cont)
html_cont <- as.data.frame(html_cont)  #data.frame형 변환
class(html_cont)
# 단계4 : 컬럼명을 수정한 후 뒷부분 6개 관측치 보기
names(html_cont) <- c("State","y2010","y2011","y2012","y2013","y2014","y2015")
tail(html_cont)
x <- 10
y <- 20
z <- x*y
z
cat(z)
cat("x*y의 결과는", z,"입니다.\n")
pring(z)
print(z)
print(z*10)
print("x*y=",z)
cat(z*10)
install.packages("RSADBE")
library(RSADBE)
data("Severity_Counts") # Severity_Counts 데이터 셋 가져오기
Severity_Counts
# 2-2. 파일에 데이터 저장
#  1) sink() 함수를 이용한 파일 저장
getwd()
setwd("C:/workspaces/Rwork/output")
sink("severity.txt") # 저장할 파일 open
severity <- Severity_Counts # 데이터 셋을 변수에 저장.
severity  # 콘솔에 출력되지 않고, 파일에 저장
sink()    # 오픈된 파일 close
#  2) write.table() 함수 이용 파일 저장
# 탐색기를 이용하여 데이터 가져오기
studenttx <- read.xlsx(file.choose(), sheetIndex = 1, encoding = "UTF-8")
#  2) write.table() 함수 이용 파일 저장
# 탐색기를 이용하여 데이터 가져오기
studenttx <- read.xlsx(file.choose(), sheetIndex = 1, encoding = "UTF-8")
studenttx
# 기본 속성으로 저장 - 행이름과 따옴표가 붙는다.
write.table(studenttx,"stdt.txt")
# 'row.names=F' 속성을 이용하여 행이름 제거하여 저장한다.
write.table(studenttx,"stdt2.txt", row.names = F)
# 'quote=F' 속성을 이용하여 따옴표를 제거하여 저장한다.
write.table(studenttx,"stdt3.txt", quote = F)
# 행이름 제거 + 따옴표 제거
write.table(studenttx,"stdt4.txt", row.names = F, quote = F)
GDP_ranking16
write.table(GDP_ranking16, "GDP_ranking16.txt", row.names = F)
read.table("GDP_ranking16.txt", sep="", header =T)
GDP_ranking16_read <- read.table("GDP_ranking16.txt", sep="", header =T)
GDP_ranking16_read
st.df <- read.xlsx(file.choose(), sheetIndex = 1, encoding = "UTF-8")
st.df
write.xlsx(st.df, "studentx.xlsx") #excel 형식으로 저장
write.csv(st.df, "stdf.csv", row.names = F, quote = F)
# 산술연산자
num1 <- 100 # 피연산자1
num2 <- 20  # 피연산자2
result <- num1 + num2  # 덧셈
result
result <- num1 - num2  # 뺄셈
result
result <- num1 * num2  # 곱셈
result
result <- num1 / num2  # 나눗셈
result
result <- num1 %% num2  # 나머지 연산자
result
result <- num1^2   # 제곱연산자(num1 ** 2)
result
result <- num1^num2   # 100의 20승(10의 40승과 동일한 결과)
result   # [1] 1e+40 -> 1 * 10^40
# 비교(관계) 연산자
# (1) 동등비교
boolean <- num1 == num2 # 두 변수의 값이 같은지 비교
boolean
boolean <- num1 != num2 # 두 변수의 값이 다른지 비교
boolean
# (2) 크기비교
boolean <- num1 > num2
boolean
boolean <- num1 >= num2
boolean
boolean <- num1 < num2
boolean
boolean <- num1 <= num2
boolean
# 논리 연산자
logical <- num1 >= 50 & num2 <= 10
logical
logical <- num1 >= 50 | num2 <= 10
logical
x <- TRUE; y <- FALSE
xor(x, y)
x <- TRUE; y <- TRUE
xor(x, y)
x <- TRUE; y <- FALSE
xor(x, y)
logical <- num1 >= 50
logical
logical <- !(num1 >= 50)
logical
# 1) if()
x <- 10
y <- 5
z <- x * y
z
if(x*y > 40){ # 산술 > 비교 > 논리
cat("x*y의 결과는 40이상입니다.\n")  # \n :줄바꿈
cat("x*y = ", z, '\n')
print(z)
}else{
cat("x*y의 결과는 40미만입니다. x*y=", z, "\n")
}
# 학점 구하기
score <- scan()
score
if(score >= 90){ # 조건식1
result = "A학점"
}else if(score >= 80){ # 조건식1
result = "B학점"
}else if(score >= 70){ # 조건식2
result = "C학점"
}else if(score >= 60){ # 조건식3
result = "D학점"
}else{
result = "F학점"
}
cat("당신의 학점은 ", result) # 당신의 학점은?
# 2) ifelse(조건, 참, 거짓) - 3항 연산자 기능
# (boolean)? true:false ;
score <- c(78, 95, 85, 65)
score
ifelse(score >= 80, "우수", "노력")
